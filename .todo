- @kaapi/server: `auth: true` should not set up startegy but only `mode: 'required'`. Strategy should be explicitly defined. @done

- @kaapi/kaapi
    - create some auth designs: @done
        - basic auth (to create from scratch) @done
        - bearer (take it from the examples/auth-designs/src/plugins/apiKeyDesign.ts) @done
        - apikey (take it from the examples/auth-designs/src/plugins/bearerDesign.ts) @done

- @kaapi/oauth2-auth-design
    - check out token type DPoP (Demonstration of Proof-of-Possession)
    - client_secret_basic as it is considered more secure than client_secret_post which is usually used for debug @done
    - should also support "client_secret_jwt" and "private_key_jwt" and token_endpoint_auth_signing_alg_values_supported @done
    - use Client Authentication Methods (client_secret_jwt, ...) in client credentials flow @done
    - package json exports: "." and "cli" @done
    - auth code + client creds (no OpenID):
        - createJwtAccessToken
            - client credentials @done
            - auth code
        - createIdToken
            - client credentials @done
            - auth code
        - jwksRoute (because yes, without OpenID, it can be used to validaten JWT access token)
            - client credentials @done
            - auth code
        - useAccessTokenJwks
            - client credentials @done
            - auth code
        - openID connect
            - client credentials
                - docs() @done
                - Discovery Endpoint (/.well-known/openid-configuration)
            - auth code
        - REALLY UPDATE AUTH CODE ONCE CLIENT CREDENTIALS WORKS
        - Supporting Multiple Flows (see NOTES: Intends to support multiple flows) (probably will have to expose route handlers and switch depending on the grant type)
    - make usage more simple (default classes with default routes, then all methods in the same class)
    - cli create templates


- @kaapi/kaapi
    - make an example with @novice1/socket @done
    - need to think more about how we are going to handle readiness (registering plugins, strategies, ...)

- @kaapi/cli
    - auth design generator (name of the class, camelCase it)


