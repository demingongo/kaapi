- @kaapi/server: `auth: true` should not set up startegy but only `mode: 'required'`. Strategy should be explicitly defined. @done

- @kaapi/kaapi
    - create some auth designs: @done
        - basic auth (to create from scratch) @done
        - bearer (take it from the examples/auth-designs/src/plugins/apiKeyDesign.ts) @done
        - apikey (take it from the examples/auth-designs/src/plugins/bearerDesign.ts) @done

- @kaapi/oauth2-auth-design
    - be able to verify jwt in refresh token
    - unify: move options (?OAuth2AuthOptions<any>) and strategyName (?string) and integrateStrategy to OAuth2AuthDesignOptions @done
    - jwks keys rotation freq and token ttl are independents, make it so. AND THE STORE shouldn't have to handle that. @done
        - store @done
        - publicKeyTtl @done
        - rotationIntervalMs @done
        - logger @done
    - REVIEW TOKEN SIGNING because something might be wrong
        - what is wrong is that the private part is in the saved keys. Private part should be saved separately.
    - check out token type DPoP (Demonstration of Proof-of-Possession) @done
    - client_secret_basic as it is considered more secure than client_secret_post which is usually used for debug @done
    - should also support "client_secret_jwt" and "private_key_jwt" and token_endpoint_auth_signing_alg_values_supported @done
    - use Client Authentication Methods (client_secret_jwt, ...) in client credentials flow @done
    - package json exports: "." and "cli" @done
    - auth code + client creds (no OpenID): @done
        - utils: function to validate codeVerifier vs saved codeChallenge @done
        - createJwtAccessToken @done
            - client credentials @done
            - auth code @done
        - createIdToken @done
            - client credentials @done
            - auth code @done
        - jwksRoute (because yes, without OpenID, it can be used to validaten JWT access token) @done
            - client credentials @done
            - auth code @done
        - useAccessTokenJwks @done
            - client credentials @done
            - auth code @done
        - openID connect @done
            - client credentials @done
                - docs() @done
                - Discovery Endpoint (/.well-known/openid-configuration) @done
            - auth code @done
            - merge discovery config properly (in case of arrays) @done
        - REALLY UPDATE AUTH CODE ONCE CLIENT CREDENTIALS WORKS @done
        - Supporting Multiple Flows (see NOTES: Intends to support multiple flows) (probably will have to expose route handlers and switch depending on the grant type) @done
    - make usage more simple (default classes with default routes, then all methods in the same class) @done
    - make usage more simple (get token type (string) in params for token and refresh token) @done
    - cli create templates


- @kaapi/kaapi
    - make an example with @novice1/socket @done
    - need to think more about how we are going to handle readiness (registering plugins, strategies, ...)

- @kaapi/cli
    - auth design generator (name of the class, camelCase it)


